import { LayoutGroup } from 'framer-motion';
import { CSSProperties, FC } from 'react';
import styles from '../styles/Projects.module.scss';
import InfiniteScroll from './InfiniteScroll';
import ProjectCard from './ProjectCard';

const containerStyle: CSSProperties = {
  fontSize: "2em",
  marginBottom: "3em",
}

const scrollerStyle: CSSProperties = {
  animationDuration: "20s",
  animationDirection: "reverse"
}

const projects = [
  {
    name: "Physics",
    type: "Frontend",
    thumbnail: "/thumbnails/physics.png",
    preview: "/previews/physics.gif",
    description: "Impulse based 2D physics playground made with vanilla HTML, CSS and JS",
    tags: ["Vanilla", "HTML", "CSS", "JavaScript", "WebApp", "Canvas"],
    favourite: false,
    explanation: [
      "This website uses HTML Canvas to draw on the screen",
      "Every frame, the physics gets calculated, updated and drawn",
      "Physics interactions are calculated with real, impulse based equations",
      "For now, only circles are handled",
      "Properties of objects and the universe can be edited in real time",
      "Springs can be used to connect two objects together"
    ],
    exploration: [
      "This is the first website I ever built",
      "Even though I was aware of frameworks existing, I wanted to use vanilla JS, HTML and CSS",
      "This caused me problems but also allowed me to understand how these work",
      "Having lots of calculations also forced me to figure out how to optimize"
    ]
  },
  {
    name: "Maze",
    type: "Frontend",
    thumbnail: "/thumbnails/maze.png",
    preview: "/previews/maze.gif",
    description: "Visualization of maze generation and solution using randomized depth first search",
    tags: ["React", "Responsive", "SCSS", "Data Structures & Algorithms"],
    favourite: false,
    explanation: [
      "This website uses depth first search algorithm with a stack",
      "Maze is stored as a two dimensional array",
      "Each cell's walls are stored as bitflags",
      "Maze is generated by randomly visiting cells and removing the walls between them",
      "When the head gets stuck, it follows the stacks back",
      "Maze is solves the same way, while respecting the walls",
      "Cells are drawn as empty cells and colored with classes in CSS"
    ],
    exploration: [ 
      "I used this webapp to learn and practice a web framework",
      "I tried both Vue.js and React. While both are similar, I found React more intuitive and cleaner",
      "I knew absolutely nothing about web frameworks so I had to read the documentation",
      "Using React, I was able to divide the website into components and handle them separately",
      "I also wanted the website to work on mobile so I learned how to make it responsive",
    ]
  },
  {
    name: "Planner",
    type: "Frontend",
    thumbnail: "/thumbnails/planner.png",
    preview: "/previews/planner.gif",
    description: "A web app to plan, organize and track your habits and responsibilities",
    tags: ["React", "TypeScript", "SCSS", "WebApp"],
    favourite: true,
    explanation: [
      "This website uses the localstorage API to store the data locally",
      "Tasks can be completed, edited and created",
      "Task completion counts are reset every day, week or month",
      "The website can be used to build habits and remember responsibilities"
    ],
    exploration: [
      "I wanted to build a useful website that I could actually use daily",
      "I built this website to fit my needs without being overly complicated",
      "While making this website, I learned how to use TypeScript",
      "Having typed variables and functions fixes many bugs before they are created",
      "I also learned new libraries like dayjs and lodash",
      "For now, this website does not work on mobile. I plan on changing that"
    ]
  },
  {
    name: "Sneakers",
    type: "Frontend",
    thumbnail: "/thumbnails/sneakers.png",
    preview: "/previews/sneakers.gif",
    description: "A simple web app to check if you should wear your sneakers or boots outside",
    tags: ["React", "TypeScript", "SCSS", "API", "WebApp", "Responsive"],
    favourite: false,
    explanation: [
      "This website uses the openweathermap API to get weather data based on location",
      "Sneakers can be worn if there is no past or soon forecasted precipitation",
      "Geolocation API can be used to quickly get weather data on current location",
      "The location can be searched from openweathermap API"
    ],
    exploration: [
      "This website is created to solve a real world problem I had",
      "I learned how to use a web API and created my own wrapper for it",
      "I had to work around a large text file and optimize searching",
      "Even though it's simple, I designed the website with mobile in mind",
      "I used React with TypeScript to further gain experience with them"
    ]
  },
  {
    name: "This Website!",
    type: "Frontend",
    thumbnail: "/thumbnails/portfolio.png",
    preview: "/previews/maze.gif",
    description: "Personal portfolio website made with NextJS\nYou are in this website right now!",
    tags: ["NextJS", "React", "TypeScript", "SCSS", "Framer Motion", "Responsive"],
    favourite: true,
    explanation: [
      "This website is a compilation of all my previous knowledge and experiences",
      "You can learn more about me and my dev adventures",
      "Projects section is ordered reverse chronologically",
      "This website uses Framer Motion for animations",
      "Contact information is in the footer at the end",
      "Do not hesitate to contact me for any reason!"
    ],
    exploration: [
      "While showcasing my previous work, I wanted the website to be unique and complex",
      "I used NextJS in addition to React to have server-side-rendering and routing",
      "I designed the website with a mobile-first approached and then adapted to tablet and desktop",
      "I added many cases to make sure the website looks fitting in any screen size",
      "I experimented with new design techniques to learn about web design",
      "I used Framer Motion to animate the website extensively"
    ]
  },
]

type props = {
  
}

const Projects: FC<props> = () => {
  return (
    <section className={styles.Projects} id="projects">
      <InfiniteScroll
        text="Projects"
        repeat={7}
        containerStyle={containerStyle}
        scrollerStyle={scrollerStyle}
      />

      <div className={styles.List}>
        <LayoutGroup>
          {[...projects].reverse().map((p, i) => (
            <ProjectCard
              key={i}
              {...p}
              reverse={!!(i % 2)}
            />
          ))}
        </LayoutGroup>
      </div>
    </section>
  )
}

export default Projects;